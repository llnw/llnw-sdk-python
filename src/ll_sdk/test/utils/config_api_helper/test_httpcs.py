#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pytest
from ll_sdk.utils.config_api_helper.httpcs import HttpCsServiceInstanceObj, HttpCsSvcInstanceBaseException

shortname = "testname"
published_host = "www.example.com"
source_host = "www.example.origin.com"
published_protocol = "https"
source_protocol = "http"
profile_name = "Test_profile"


@pytest.fixture(scope="function")
def httpcs_svc_instance():
    """Fixture for generating default HttpCsServiceInstance object"""
    inst = HttpCsServiceInstanceObj()
    inst.generate_default(shortname, ['hls', 'hds'], published_host=published_host, source_host=source_host,
                          profile_name=profile_name, published_protocol=published_protocol,
                          source_protocol=source_protocol)
    return inst


def test_generate_default():
    """Test: Generate default Httpcs Service Instance object

    Steps:
    1. Generate default HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is generated as expected
    """
    httpcs = HttpCsServiceInstanceObj()
    httpcs.generate_default(shortname, 'hls', published_host=published_host, source_host=source_host,
                            profile_name=profile_name, published_protocol=published_protocol,
                            source_protocol=source_protocol)
    expected = {
        'body': {
            'httpcsSvcInstance': {
                'protocolSets': [
                    {
                        'publishedProtocol': published_protocol,
                        'sourceProtocol': source_protocol,
                        'options': []
                    }
                ],
                'description': 'httpcs instance generated by LLNW-SDK utils',
                'serviceProfileName': profile_name,
                'publishedHostname': published_host,
                'sourceHostname': source_host,
                'publishedUrlPath': '',
                'sourceUrlPath': '',
                'serviceKey': {'name': 'httpcs'}},
            'childHttpcsSvcInstances': [
                {
                    'protocolSets': [
                        {
                            'publishedProtocol': published_protocol,
                            'sourceProtocol': source_protocol,
                            'options': []
                        }
                    ],
                    'description': 'Generated by LLNW-SDK child hls - manifest',
                    'publishedUrlPath': '',
                    'sourceUrlPath': '',
                    'serviceKey': {
                        'name': 'httpcs',
                        'videoFormat': 'hls',
                        'rewriteType': 'manifest'
                    }
                },
                {
                    'protocolSets': [
                        {
                            'publishedProtocol': published_protocol,
                            'sourceProtocol': source_protocol,
                            'options': []
                        }
                    ],
                    'description': 'Generated by LLNW-SDK child hls - chunk',
                    'publishedUrlPath': '',
                    'sourceUrlPath': '',
                    'serviceKey': {
                        'name': 'httpcs',
                        'videoFormat': 'hls',
                        'rewriteType': 'chunk'
                    }
                }
            ]
        },
        'accounts': [{'shortname': shortname}]}
    assert expected == httpcs


@pytest.mark.parametrize('pub,source', [(published_protocol, None), (None, source_protocol)])
def test_generate_default_raise_exc(pub, source):
    """Test: Generate default Httpcs Service Instance object with exception

    Steps:
    1. Generate default HttpCsSvcInstance object, do not set either published or source protocol
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    httpcs = HttpCsServiceInstanceObj()
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs.generate_default(shortname, 'hls', published_host=published_host, source_host=source_host,
                                profile_name=profile_name, published_protocol=pub, source_protocol=source)


@pytest.mark.parametrize('field', ['revision', 'status', 'shortname'])
def test_process_response(httpcs_svc_instance, field):
    """Test: Convert API response to Httpcs Service Instance object

    Steps:
    1. Transform API response to DHttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is generated as expected
    """
    api_response = {"uuid": "78df6c87-b19f-42cb-bee7-263ec58e3950",
                    "isLatest": True,
                    "isEnabled": True,
                    "revision": {"createdBy": "test_user",
                                 "createdDate": 1530022531900,
                                 "versionNumber": 3},
                    "meta": {"manifestVersion": "4",
                             "serviceIdentifier": "deliverysvcinst",
                             "serviceKey": "delivery"},
                    "status": {"state": "COMPLETED"},
                    "accounts": [{"shortname": shortname}],
                    "shortname": shortname,
                    "body": {
                        "httpcsSvcInstance": {
                            "protocolSets": [
                                {
                                    "publishedProtocol": published_protocol,
                                    "sourceProtocol": source_protocol,
                                    "options": [{"name": "some_option"}]
                                }
                            ],
                            "description": "httpcs instance generated by LLNW-SDK utils",
                            "serviceProfileName": profile_name,
                            "publishedHostname": published_host,
                            "sourceHostname": source_host,
                            "publishedUrlPath": "/",
                            "sourceUrlPath": "/",
                            "serviceKey": {"name": "httpcs"}},
                        'childHttpcsSvcInstances': [
                            {
                                'protocolSets': [
                                    {
                                        'publishedProtocol': published_protocol,
                                        'sourceProtocol': source_protocol,
                                        'options': [{"name": "some_option"}]
                                    }
                                ],
                                'description': 'Generated by LLNW-SDK child hls - manifest',
                                'publishedUrlPath': '/hls/manifest',
                                'sourceUrlPath': '/hls/manifest',
                                'serviceKey': {
                                    'name': 'httpcs',
                                    'videoFormat': 'hls',
                                    'rewriteType': 'manifest'
                                }
                            },
                            {
                                'protocolSets': [
                                    {
                                        'publishedProtocol': published_protocol,
                                        'sourceProtocol': source_protocol,
                                        'options': [{"name": "some_option"}]
                                    }
                                ],
                                'description': 'Generated by LLNW-SDK child hls - chunk',
                                'publishedUrlPath': '/hls/chunk',
                                'sourceUrlPath': '/hls/chunk',
                                'serviceKey': {
                                    'name': 'httpcs',
                                    'videoFormat': 'hls',
                                    'rewriteType': 'chunk'
                                }
                            }
                        ]
                    }}
    httpcs_svc_instance.process_response(api_response)
    assert field not in httpcs_svc_instance


@pytest.mark.parametrize('pub', [published_protocol, None])
@pytest.mark.parametrize('source', [source_protocol, None])
@pytest.mark.parametrize('options', [[{"name": "some_option"}], None])
def test_add_protocol_set(httpcs_svc_instance, pub, source, options):
    """Test: Add protocolSet to all instances in Httpcs Service Instance object

    Steps:
    1. Add additional protocolSet to all instances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_protocol_set_all(published_protocol=pub, source_protocol=source, options=options)
    exp_prot_set = {"publishedProtocol": pub,
                    "sourceProtocol": source,
                    "options": options}
    if pub is None:
        exp_prot_set["publishedProtocol"] = "https"
    if source is None:
        exp_prot_set["sourceProtocol"] = "https"
    if options is None:
        exp_prot_set["options"] = []
    assert 2 == len(httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"])
    assert exp_prot_set == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][1]
    for child in httpcs_svc_instance["body"]["childHttpcsSvcInstances"]:
        assert 2 == len(child["protocolSets"])
        assert exp_prot_set == child["protocolSets"][1]


def test_clear_root_protocol_sets(httpcs_svc_instance):
    """Test: Clear protocolSets in rootInstance in Httpcs Service Instance object

    Steps:
    1. Clear protocolSets in rootInstance in in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.clear_root_protocol_sets()
    assert [] == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"]


@pytest.mark.parametrize('child_idx,video_format,rewrite_type', [(1, None, None), (None, 'hls', 'chunk'),
                                                                 (None, None, None)])
def test_clear_child_protocol_sets(httpcs_svc_instance, child_idx, video_format, rewrite_type):
    """Test: Clear protocolSets in childInstances in Httpcs Service Instance object

    Steps:
    1. Clear protocolSets in childInstances in in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.clear_child_protocol_sets(child_idx=child_idx, video_formats=video_format,
                                                  rewrite_type=rewrite_type)
    assert 1 == len(httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"])
    if not (child_idx or video_format or rewrite_type):
        for child in httpcs_svc_instance["body"]["childHttpcsSvcInstances"]:
            assert [] == child["protocolSets"]
    else:
        assert [] == httpcs_svc_instance["body"]["childHttpcsSvcInstances"][1]["protocolSets"]
        assert 1 == len(httpcs_svc_instance["body"]["childHttpcsSvcInstances"][0]["protocolSets"])


@pytest.mark.parametrize('video_format,rewrite_type', [('hls', None), (None, 'chunk')])
def test_clear_child_protocol_sets_raise_exc(httpcs_svc_instance, video_format, rewrite_type):
    """Test: Clear protocolSets with exception in Httpcs Service Instance object

    Steps:
    1. Clear protocolSets, do not set either published or source protocol
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.clear_child_protocol_sets(video_formats=video_format, rewrite_type=rewrite_type)


@pytest.mark.parametrize('pub', [published_protocol, None])
@pytest.mark.parametrize('source', [source_protocol, None])
@pytest.mark.parametrize('options', [[{"name": "some_option"}], None])
def test_add_root_protocol_set(httpcs_svc_instance, pub, source, options):
    """Test: Add protocolSet to rootInstance in Httpcs Service Instance object

    Steps:
    1. Add additional protocolSet to rootInstance in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_root_protocol_set(published_protocol=pub, source_protocol=source, options=options)
    exp_prot_set = {"publishedProtocol": pub,
                    "sourceProtocol": source,
                    "options": options}
    if pub is None:
        exp_prot_set["publishedProtocol"] = "https"
    if source is None:
        exp_prot_set["sourceProtocol"] = "https"
    if options is None:
        exp_prot_set["options"] = []
    assert 2 == len(httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"])
    assert exp_prot_set == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][1]
    for child in httpcs_svc_instance["body"]["childHttpcsSvcInstances"]:
        assert 1 == len(child["protocolSets"])


@pytest.mark.parametrize('child_idx,video_format,rewrite_type', [(1, None, None), (None, 'hls', 'chunk'),
                                                                 (None, None, None)])
def test_add_child_protocol_set(httpcs_svc_instance, child_idx, video_format, rewrite_type):
    """Test: Add protocolSet to childInstances in Httpcs Service Instance object

    Steps:
    1. Add additional protocolSet to childInstances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_child_protocol_set('http', 'http', child_idx=child_idx, video_formats=video_format,
                                               rewrite_type=rewrite_type, published_port=80, source_port=8080,
                                               options=[{"name": "some_option"}])
    exp_prot_set = {"publishedProtocol": "http",
                    "sourceProtocol": "http",
                    "publishedPort": 80,
                    "sourcePort": 8080,
                    "options": [{"name": "some_option"}]}
    if not (child_idx or video_format or rewrite_type):
        for child in httpcs_svc_instance["body"]["childHttpcsSvcInstances"]:
            assert 2 == len(child["protocolSets"])
            assert exp_prot_set == child["protocolSets"][1]
    else:
        assert 1 == len(httpcs_svc_instance["body"]["childHttpcsSvcInstances"][0]["protocolSets"])
        assert 2 == len(httpcs_svc_instance["body"]["childHttpcsSvcInstances"][1]["protocolSets"])
        assert exp_prot_set == httpcs_svc_instance["body"]["childHttpcsSvcInstances"][1]["protocolSets"][1]


@pytest.mark.parametrize('video_format,rewrite_type', [('hls', None), (None, 'chunk')])
def test_add_child_protocol_set_raise_exc(httpcs_svc_instance, video_format, rewrite_type):
    """Test: Add protocolSet to childInstances in Httpcs Service Instance object with exception

    Steps:
    1. Add protocolSet to childInstance, do not set either videoFormat or rewriteType
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.add_child_protocol_set('http', 'http', video_formats=video_format,
                                                   rewrite_type=rewrite_type, source_port=8080,
                                                   options=[{"name": "some_option"}])


def test_modify_root_protocol_set(httpcs_svc_instance):
    """Test: Modify protocolSet in rootInstance in Httpcs Service Instance object

    Steps:
    1. Modify protocolSet in rootInstance in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.modify_root_protocol_set(published_protocol, source_protocol,
                                                 published_port=80, source_port=8080,
                                                 options=[{"name": "some_option"}])
    exp_prot_set = {"publishedProtocol": published_protocol,
                    "sourceProtocol": source_protocol,
                    "publishedPort": 80,
                    "sourcePort": 8080,
                    "options": [{"name": "some_option"}]}
    assert exp_prot_set == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][0]


@pytest.mark.parametrize('child_idx,video_format,rewrite_type', [(1, None, None), (None, 'hls', 'chunk')])
def test_modify_child_protocol_set(httpcs_svc_instance, child_idx, video_format, rewrite_type):
    """Test: Modify protocolSet in childInstances in Httpcs Service Instance object

    Steps:
    1. Modify protocolSet in childInstances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.modify_child_protocol_set(published_protocol, source_protocol,
                                                  child_idx=child_idx, video_formats=video_format,
                                                  rewrite_type=rewrite_type, published_port=80, source_port=8080,
                                                  options=[{"name": "some_option"}])
    exp_prot_set = {"publishedProtocol": published_protocol,
                    "sourceProtocol": source_protocol,
                    "publishedPort": 80,
                    "sourcePort": 8080,
                    "options": [{"name": "some_option"}]}
    for child in httpcs_svc_instance["body"]["childHttpcsSvcInstances"]:
        assert 1 == len(child["protocolSets"])
    assert exp_prot_set == httpcs_svc_instance["body"]["childHttpcsSvcInstances"][1]["protocolSets"][0]


@pytest.mark.parametrize('video_format,rewrite_type', [('hls', None), (None, 'chunk')])
def test_modify_child_protocol_set_raise_exc(httpcs_svc_instance, video_format, rewrite_type):
    """Test: Modify protocolSet in childInstances in Httpcs Service Instance object with exception

    Steps:
    1. Modify protocolSet in childInstance, do not set either videoFormat or rewriteType
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.modify_child_protocol_set(published_protocol, source_protocol,
                                                      video_formats=video_format, rewrite_type=rewrite_type,
                                                      options=[{"name": "some_option"}])


@pytest.mark.parametrize('pub,source', [(published_protocol, source_protocol), (None, None)])
def test_add_root_option(httpcs_svc_instance, pub, source):
    """Test: Add option to rootInstance in Httpcs Service Instance object

    Steps:
    1. Add option to rootInstance in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_root_option("some_option", option_parameters=["some_param", 1],
                                        published_protocol=pub, source_protocol=source)
    httpcs_svc_instance.add_root_option("some_option1", published_protocol=pub, source_protocol=source)
    options = [{"name": "some_option", "parameters": ["some_param", 1]},
               {"name": "some_option1", "parameters": []}]
    for protocol_set in httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"]:
        assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["childHttpcsSvcInstances"][0]["protocolSets"][0]["options"]


@pytest.mark.parametrize('pub,source', [(published_protocol, None), (None, source_protocol)])
def test_add_root_option_raise_exc(httpcs_svc_instance, pub, source):
    """Test: Add option to rootInstance in Httpcs Service Instance object with exception

    Steps:
    1. Add option to rootInstance, do not set either published or sourceProtocol
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.add_root_option("some_option", option_parameters=["some_param", 1],
                                            published_protocol=pub, source_protocol=source)


@pytest.mark.parametrize('pub,source', [(published_protocol, source_protocol), (None, None)])
def test_modify_root_option(httpcs_svc_instance, pub, source):
    """Test: Modify option in rootInstance in Httpcs Service Instance object

    Steps:
    1. Modify option in rootInstance in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_root_option("some_option", option_parameters=["some_param", 1],
                                        published_protocol=pub, source_protocol=source)
    httpcs_svc_instance.modify_root_options("some_option", ["some_param"], published_protocol=pub,
                                            source_protocol=source)
    options = [{"name": "some_option", "parameters": ["some_param"]}]
    for protocol_set in httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"]:
        assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["childHttpcsSvcInstances"][0]["protocolSets"][0]["options"]


@pytest.mark.parametrize('pub,source', [(published_protocol, None), (None, source_protocol)])
def test_modify_root_option_raise_exc(httpcs_svc_instance, pub, source):
    """Test: Modify option in rootInstance in Httpcs Service Instance object with exception

    Steps:
    1. Modify option in rootInstance, do not set either published or sourceProtocol
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    httpcs_svc_instance.add_root_option("some_option", option_parameters=["some_param", 1],
                                        published_protocol=published_protocol, source_protocol=source_protocol)
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.modify_root_options("some_option", ["some_param"], published_protocol=pub,
                                                source_protocol=source)


@pytest.mark.parametrize('pub,source', [(published_protocol, source_protocol), (None, None)])
def test_remove_root_option(httpcs_svc_instance, pub, source):
    """Test: Remove option from rootInstance in Httpcs Service Instance object

    Steps:
    1. Remove option from rootInstance in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_root_option("some_option", option_parameters=["some_param", 1],
                                        published_protocol=pub, source_protocol=source)
    httpcs_svc_instance.add_root_option("some_option1", option_parameters=["some_param"],
                                        published_protocol=pub, source_protocol=source)
    httpcs_svc_instance.remove_root_option("some_option1", published_protocol=pub, source_protocol=source)
    options = [{"name": "some_option", "parameters": ["some_param", 1]}]
    for protocol_set in httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"]:
        assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["childHttpcsSvcInstances"][0]["protocolSets"][0]["options"]


@pytest.mark.parametrize('pub,source', [(published_protocol, None), (None, source_protocol)])
def test_remove_root_option_raise_exc(httpcs_svc_instance, pub, source):
    """Test: Remove option from rootInstance in Httpcs Service Instance object with exception

    Steps:
    1. Remove option from rootInstance, do not set either published or sourceProtocol
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    httpcs_svc_instance.add_root_option("some_option", option_parameters=["some_param", 1],
                                        published_protocol=published_protocol, source_protocol=source_protocol)
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.remove_root_option("some_option", published_protocol=pub, source_protocol=source)


@pytest.mark.parametrize('pub,source', [(published_protocol, source_protocol), (None, None)])
def test_add_child_option_define_protocol(httpcs_svc_instance, pub, source):
    """Test: Add option to childInstances in Httpcs Service Instance object

    Steps:
    1. Add option to childInstances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                         published_protocol=pub, source_protocol=source)
    options = [{"name": "some_option", "parameters": ["some_param", 1]}]
    for child in httpcs_svc_instance["body"]["childHttpcsSvcInstances"]:
        for protocol_set in child["protocolSets"]:
            assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][0]["options"]


@pytest.mark.parametrize('pub,source', [(published_protocol, None), (None, source_protocol)])
def test_add_child_option_define_protocol_raise_exc(httpcs_svc_instance, pub, source):
    """Test: Add option to childInstances in Httpcs Service Instance object with exception

    Steps:
    1. Add option to childInstances, do not set either published or sourceProtocol
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                             published_protocol=pub, source_protocol=source)


@pytest.mark.parametrize('pub,source', [(published_protocol, source_protocol), (None, None)])
def test_modify_child_option_define_protocol(httpcs_svc_instance, pub, source):
    """Test: Modify option in childInstances in Httpcs Service Instance object

    Steps:
    1. Modify option in childInstances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                         published_protocol=pub, source_protocol=source)
    httpcs_svc_instance.modify_child_options("some_option", ["some_param"], published_protocol=pub,
                                             source_protocol=source)
    options = [{"name": "some_option", "parameters": ["some_param"]}]
    for child in httpcs_svc_instance["body"]["childHttpcsSvcInstances"]:
        for protocol_set in child["protocolSets"]:
            assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][0]["options"]


@pytest.mark.parametrize('pub,source', [(published_protocol, None), (None, source_protocol)])
def test_modify_child_option_define_protocol_raise_exc(httpcs_svc_instance, pub, source):
    """Test: Modify option in childInstances in Httpcs Service Instance object with exception

    Steps:
    1. Modify option in childInstances, do not set either published or sourceProtocol
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                         published_protocol=published_protocol, source_protocol=source_protocol)
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.modify_child_options("some_option", ["some_param"], published_protocol=pub,
                                                 source_protocol=source)


@pytest.mark.parametrize('pub,source', [(published_protocol, source_protocol), (None, None)])
def test_remove_child_option_define_protocol(httpcs_svc_instance, pub, source):
    """Test: Remove option from childInstances in Httpcs Service Instance object

    Steps:
    1. Remove option from childInstances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                         published_protocol=pub, source_protocol=source)
    httpcs_svc_instance.add_child_option("some_option1", option_parameters=["some_param"],
                                         published_protocol=pub, source_protocol=source)
    httpcs_svc_instance.delete_child_option("some_option", published_protocol=pub, source_protocol=source)
    options = [{"name": "some_option1", "parameters": ["some_param"]}]
    for child in httpcs_svc_instance["body"]["childHttpcsSvcInstances"]:
        for protocol_set in child["protocolSets"]:
            assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][0]["options"]


@pytest.mark.parametrize('pub,source', [(published_protocol, None), (None, source_protocol)])
def test_remove_child_option_define_protocol_raise_exc(httpcs_svc_instance, pub, source):
    """Test: Remove option from childInstances in Httpcs Service Instance object with exception

    Steps:
    1. Remove option from childInstances, do not set either published or sourceProtocol
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                         published_protocol=published_protocol, source_protocol=source_protocol)
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.delete_child_option("some_option", published_protocol=pub, source_protocol=source)


def test_add_child_option_define_child_idx(httpcs_svc_instance):
    """Test: Add option to childInstances in Httpcs Service Instance object using child index

    Steps:
    1. Add option to childInstances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1], child_idx=1)
    options = [{"name": "some_option", "parameters": ["some_param", 1]}]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][0]["protocolSets"]:
        assert [] == protocol_set["options"]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][1]["protocolSets"]:
        assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][0]["options"]


def test_modify_child_option_define_child_idx(httpcs_svc_instance):
    """Test: Modify option in childInstances in Httpcs Service Instance object using child index

    Steps:
    1. Modify option in childInstances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1], child_idx=1)
    httpcs_svc_instance.modify_child_options("some_option", ["some_param"], child_idx=1)
    options = [{"name": "some_option", "parameters": ["some_param"]}]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][0]["protocolSets"]:
        assert [] == protocol_set["options"]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][1]["protocolSets"]:
        assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][0]["options"]


def test_remove_child_option_define_child_idx(httpcs_svc_instance):
    """Test: Remove option from childInstances in Httpcs Service Instance object using child index

    Steps:
    1. Remove option from childInstances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1], child_idx=1)
    httpcs_svc_instance.add_child_option("some_option1", option_parameters=["some_param"], child_idx=1)
    httpcs_svc_instance.delete_child_option("some_option", child_idx=1)
    options = [{"name": "some_option1", "parameters": ["some_param"]}]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][0]["protocolSets"]:
        assert [] == protocol_set["options"]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][1]["protocolSets"]:
        assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][0]["options"]


def test_add_child_option_define_child_type(httpcs_svc_instance):
    """Test: Add option to childInstances in Httpcs Service Instance object using child format

    Steps:
    1. Add option to childInstances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                         video_formats='hls', rewrite_type='chunk')
    options = [{"name": "some_option", "parameters": ["some_param", 1]}]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][0]["protocolSets"]:
        assert [] == protocol_set["options"]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][1]["protocolSets"]:
        assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][0]["options"]


@pytest.mark.parametrize('video_format,rewrite_type', [('hls', None), (None, 'chunk')])
def test_add_child_option_define_child_type_raise_exc(httpcs_svc_instance, video_format, rewrite_type):
    """Test: Add option to childInstances in Httpcs Service Instance object with exception

    Steps:
    1. Add option to childInstances, do not set either videoFormat or rewriteType
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                             video_formats=video_format, rewrite_type=rewrite_type)


def test_modify_child_option_define_child_type(httpcs_svc_instance):
    """Test: Modify option in childInstances in Httpcs Service Instance object using child format

    Steps:
    1. Modify option in childInstances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                         video_formats='hls', rewrite_type='chunk')
    httpcs_svc_instance.modify_child_options("some_option", ["some_param"],
                                             video_formats='hls', rewrite_type='chunk')
    options = [{"name": "some_option", "parameters": ["some_param"]}]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][0]["protocolSets"]:
        assert [] == protocol_set["options"]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][1]["protocolSets"]:
        assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][0]["options"]


@pytest.mark.parametrize('video_format,rewrite_type', [('hls', None), (None, 'chunk')])
def test_modify_child_option_define_child_type_raise_exc(httpcs_svc_instance, video_format, rewrite_type):
    """Test: Modify option in childInstances in Httpcs Service Instance object with exception

    Steps:
    1. Modify option in childInstances, do not set either videoFormat or rewriteType
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                         video_formats='hls', rewrite_type='chunk')
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.modify_child_options("some_option", ["some_param"],
                                                 video_formats=video_format, rewrite_type=rewrite_type)


def test_remove_child_option_define_child_type(httpcs_svc_instance):
    """Test: Remove option from childInstances in Httpcs Service Instance object using child format

    Steps:
    1. Remove option from childInstances in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                         video_formats='hls', rewrite_type='chunk')
    httpcs_svc_instance.add_child_option("some_option1", option_parameters=["some_param"],
                                         video_formats='hls', rewrite_type='chunk')
    httpcs_svc_instance.delete_child_option("some_option", video_formats='hls', rewrite_type='chunk')
    options = [{"name": "some_option1", "parameters": ["some_param"]}]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][0]["protocolSets"]:
        assert [] == protocol_set["options"]
    for protocol_set in httpcs_svc_instance["body"]["childHttpcsSvcInstances"][1]["protocolSets"]:
        assert options == protocol_set["options"]
    assert [] == httpcs_svc_instance["body"]["httpcsSvcInstance"]["protocolSets"][0]["options"]


@pytest.mark.parametrize('video_format,rewrite_type', [('hls', None), (None, 'chunk')])
def test_remove_child_option_define_child_type_raise_exc(httpcs_svc_instance, video_format, rewrite_type):
    """Test: Remove option from childInstances in Httpcs Service Instance object with exception

    Steps:
    1. Remove option from childInstances, do not set either videoFormat or rewriteType
    2. Check raised exception

    Result:
    OK: exception is raised
    """
    httpcs_svc_instance.add_child_option("some_option", option_parameters=["some_param", 1],
                                         video_formats='hls', rewrite_type='chunk')
    with pytest.raises(HttpCsSvcInstanceBaseException):
        httpcs_svc_instance.delete_child_option("some_option", video_formats=video_format, rewrite_type=rewrite_type)


def test_profile_name(httpcs_svc_instance):
    """Test: Set Profile's name in Httpcs Service Instance object

    Steps:
    1. Set profile's name in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcsysvcinst object is updated as expected
    """
    upd_profile_name = "Test_profile_upd"
    httpcs_svc_instance.profile_name = upd_profile_name
    assert upd_profile_name == httpcs_svc_instance["body"]["httpcsSvcInstance"]["serviceProfileName"]
    assert httpcs_svc_instance.profile_name == httpcs_svc_instance["body"]["httpcsSvcInstance"]["serviceProfileName"]


def test_shortname(httpcs_svc_instance):
    """Test: Set shortname in Httpcs Service Instance object

    Steps:
    1. Set shortname in HttpCsSvcInstance object
    2. Compare expected result with actual

    Result:
    OK: httpcssvcinst object is updated as expected
    """
    upd_shortname = "updshortname"
    httpcs_svc_instance.shortname = upd_shortname
    assert upd_shortname == httpcs_svc_instance["accounts"][0]["shortname"]
    assert httpcs_svc_instance.shortname == httpcs_svc_instance["accounts"][0]["shortname"]
